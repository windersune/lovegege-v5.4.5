{
  "version": 3,
  "sources": ["../../marked/lib/marked.esm.js"],
  "sourcesContent": ["/**\r\n * marked v5.1.2 - a markdown parser\r\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\r\n * https://github.com/markedjs/marked\r\n */\r\n\r\n/**\r\n * DO NOT EDIT THIS FILE\r\n * The code in this file is generated from files in ./src/\r\n */\r\n\r\nfunction getDefaults() {\r\n  return {\r\n    async: false,\r\n    baseUrl: null,\r\n    breaks: false,\r\n    extensions: null,\r\n    gfm: true,\r\n    headerIds: true,\r\n    headerPrefix: '',\r\n    highlight: null,\r\n    hooks: null,\r\n    langPrefix: 'language-',\r\n    mangle: true,\r\n    pedantic: false,\r\n    renderer: null,\r\n    sanitize: false,\r\n    sanitizer: null,\r\n    silent: false,\r\n    smartypants: false,\r\n    tokenizer: null,\r\n    walkTokens: null,\r\n    xhtml: false\r\n  };\r\n}\r\n\r\nlet defaults = getDefaults();\r\n\r\nfunction changeDefaults(newDefaults) {\r\n  defaults = newDefaults;\r\n}\r\n\r\n/**\r\n * Helpers\r\n */\r\nconst escapeTest = /[&<>\"']/;\r\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\r\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\r\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\r\nconst escapeReplacements = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;'\r\n};\r\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\r\nfunction escape(html, encode) {\r\n  if (encode) {\r\n    if (escapeTest.test(html)) {\r\n      return html.replace(escapeReplace, getEscapeReplacement);\r\n    }\r\n  } else {\r\n    if (escapeTestNoEncode.test(html)) {\r\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\r\n    }\r\n  }\r\n\r\n  return html;\r\n}\r\n\r\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\r\n\r\n/**\r\n * @param {string} html\r\n */\r\nfunction unescape(html) {\r\n  // explicitly match decimal, hex, and named HTML entities\r\n  return html.replace(unescapeTest, (_, n) => {\r\n    n = n.toLowerCase();\r\n    if (n === 'colon') return ':';\r\n    if (n.charAt(0) === '#') {\r\n      return n.charAt(1) === 'x'\r\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\r\n        : String.fromCharCode(+n.substring(1));\r\n    }\r\n    return '';\r\n  });\r\n}\r\n\r\nconst caret = /(^|[^\\[])\\^/g;\r\n\r\n/**\r\n * @param {string | RegExp} regex\r\n * @param {string} opt\r\n */\r\nfunction edit(regex, opt) {\r\n  regex = typeof regex === 'string' ? regex : regex.source;\r\n  opt = opt || '';\r\n  const obj = {\r\n    replace: (name, val) => {\r\n      val = val.source || val;\r\n      val = val.replace(caret, '$1');\r\n      regex = regex.replace(name, val);\r\n      return obj;\r\n    },\r\n    getRegex: () => {\r\n      return new RegExp(regex, opt);\r\n    }\r\n  };\r\n  return obj;\r\n}\r\n\r\nconst nonWordAndColonTest = /[^\\w:]/g;\r\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\r\n\r\n/**\r\n * @param {boolean} sanitize\r\n * @param {string} base\r\n * @param {string} href\r\n */\r\nfunction cleanUrl(sanitize, base, href) {\r\n  if (sanitize) {\r\n    let prot;\r\n    try {\r\n      prot = decodeURIComponent(unescape(href))\r\n        .replace(nonWordAndColonTest, '')\r\n        .toLowerCase();\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\r\n      return null;\r\n    }\r\n  }\r\n  if (base && !originIndependentUrl.test(href)) {\r\n    href = resolveUrl(base, href);\r\n  }\r\n  try {\r\n    href = encodeURI(href).replace(/%25/g, '%');\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n  return href;\r\n}\r\n\r\nconst baseUrls = {};\r\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\r\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\r\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\r\n\r\n/**\r\n * @param {string} base\r\n * @param {string} href\r\n */\r\nfunction resolveUrl(base, href) {\r\n  if (!baseUrls[' ' + base]) {\r\n    // we can ignore everything in base after the last slash of its path component,\r\n    // but we might need to add _that_\r\n    // https://tools.ietf.org/html/rfc3986#section-3\r\n    if (justDomain.test(base)) {\r\n      baseUrls[' ' + base] = base + '/';\r\n    } else {\r\n      baseUrls[' ' + base] = rtrim(base, '/', true);\r\n    }\r\n  }\r\n  base = baseUrls[' ' + base];\r\n  const relativeBase = base.indexOf(':') === -1;\r\n\r\n  if (href.substring(0, 2) === '//') {\r\n    if (relativeBase) {\r\n      return href;\r\n    }\r\n    return base.replace(protocol, '$1') + href;\r\n  } else if (href.charAt(0) === '/') {\r\n    if (relativeBase) {\r\n      return href;\r\n    }\r\n    return base.replace(domain, '$1') + href;\r\n  } else {\r\n    return base + href;\r\n  }\r\n}\r\n\r\nconst noopTest = { exec: function noopTest() {} };\r\n\r\nfunction splitCells(tableRow, count) {\r\n  // ensure that every cell-delimiting pipe has a space\r\n  // before it to distinguish it from an escaped pipe\r\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\r\n      let escaped = false,\r\n        curr = offset;\r\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\r\n      if (escaped) {\r\n        // odd number of slashes means | is escaped\r\n        // so we leave it alone\r\n        return '|';\r\n      } else {\r\n        // add space before unescaped |\r\n        return ' |';\r\n      }\r\n    }),\r\n    cells = row.split(/ \\|/);\r\n  let i = 0;\r\n\r\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\r\n  if (!cells[0].trim()) { cells.shift(); }\r\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\r\n\r\n  if (cells.length > count) {\r\n    cells.splice(count);\r\n  } else {\r\n    while (cells.length < count) cells.push('');\r\n  }\r\n\r\n  for (; i < cells.length; i++) {\r\n    // leading or trailing whitespace is ignored per the gfm spec\r\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\r\n  }\r\n  return cells;\r\n}\r\n\r\n/**\r\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\r\n * /c*$/ is vulnerable to REDOS.\r\n *\r\n * @param {string} str\r\n * @param {string} c\r\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\r\n */\r\nfunction rtrim(str, c, invert) {\r\n  const l = str.length;\r\n  if (l === 0) {\r\n    return '';\r\n  }\r\n\r\n  // Length of suffix matching the invert condition.\r\n  let suffLen = 0;\r\n\r\n  // Step left until we fail to match the invert condition.\r\n  while (suffLen < l) {\r\n    const currChar = str.charAt(l - suffLen - 1);\r\n    if (currChar === c && !invert) {\r\n      suffLen++;\r\n    } else if (currChar !== c && invert) {\r\n      suffLen++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return str.slice(0, l - suffLen);\r\n}\r\n\r\nfunction findClosingBracket(str, b) {\r\n  if (str.indexOf(b[1]) === -1) {\r\n    return -1;\r\n  }\r\n  const l = str.length;\r\n  let level = 0,\r\n    i = 0;\r\n  for (; i < l; i++) {\r\n    if (str[i] === '\\\\') {\r\n      i++;\r\n    } else if (str[i] === b[0]) {\r\n      level++;\r\n    } else if (str[i] === b[1]) {\r\n      level--;\r\n      if (level < 0) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction checkDeprecations(opt, callback) {\r\n  if (!opt || opt.silent) {\r\n    return;\r\n  }\r\n\r\n  if (callback) {\r\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\r\n  }\r\n\r\n  if (opt.sanitize || opt.sanitizer) {\r\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\r\n  }\r\n\r\n  if (opt.highlight || opt.langPrefix !== 'language-') {\r\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\r\n  }\r\n\r\n  if (opt.mangle) {\r\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\r\n  }\r\n\r\n  if (opt.baseUrl) {\r\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\r\n  }\r\n\r\n  if (opt.smartypants) {\r\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\r\n  }\r\n\r\n  if (opt.xhtml) {\r\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\r\n  }\r\n\r\n  if (opt.headerIds || opt.headerPrefix) {\r\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\r\n  }\r\n}\r\n\r\nfunction outputLink(cap, link, raw, lexer) {\r\n  const href = link.href;\r\n  const title = link.title ? escape(link.title) : null;\r\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\r\n\r\n  if (cap[0].charAt(0) !== '!') {\r\n    lexer.state.inLink = true;\r\n    const token = {\r\n      type: 'link',\r\n      raw,\r\n      href,\r\n      title,\r\n      text,\r\n      tokens: lexer.inlineTokens(text)\r\n    };\r\n    lexer.state.inLink = false;\r\n    return token;\r\n  }\r\n  return {\r\n    type: 'image',\r\n    raw,\r\n    href,\r\n    title,\r\n    text: escape(text)\r\n  };\r\n}\r\n\r\nfunction indentCodeCompensation(raw, text) {\r\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\r\n\r\n  if (matchIndentToCode === null) {\r\n    return text;\r\n  }\r\n\r\n  const indentToCode = matchIndentToCode[1];\r\n\r\n  return text\r\n    .split('\\n')\r\n    .map(node => {\r\n      const matchIndentInNode = node.match(/^\\s+/);\r\n      if (matchIndentInNode === null) {\r\n        return node;\r\n      }\r\n\r\n      const [indentInNode] = matchIndentInNode;\r\n\r\n      if (indentInNode.length >= indentToCode.length) {\r\n        return node.slice(indentToCode.length);\r\n      }\r\n\r\n      return node;\r\n    })\r\n    .join('\\n');\r\n}\r\n\r\n/**\r\n * Tokenizer\r\n */\r\nclass Tokenizer {\r\n  constructor(options) {\r\n    this.options = options || defaults;\r\n  }\r\n\r\n  space(src) {\r\n    const cap = this.rules.block.newline.exec(src);\r\n    if (cap && cap[0].length > 0) {\r\n      return {\r\n        type: 'space',\r\n        raw: cap[0]\r\n      };\r\n    }\r\n  }\r\n\r\n  code(src) {\r\n    const cap = this.rules.block.code.exec(src);\r\n    if (cap) {\r\n      const text = cap[0].replace(/^ {1,4}/gm, '');\r\n      return {\r\n        type: 'code',\r\n        raw: cap[0],\r\n        codeBlockStyle: 'indented',\r\n        text: !this.options.pedantic\r\n          ? rtrim(text, '\\n')\r\n          : text\r\n      };\r\n    }\r\n  }\r\n\r\n  fences(src) {\r\n    const cap = this.rules.block.fences.exec(src);\r\n    if (cap) {\r\n      const raw = cap[0];\r\n      const text = indentCodeCompensation(raw, cap[3] || '');\r\n\r\n      return {\r\n        type: 'code',\r\n        raw,\r\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\r\n        text\r\n      };\r\n    }\r\n  }\r\n\r\n  heading(src) {\r\n    const cap = this.rules.block.heading.exec(src);\r\n    if (cap) {\r\n      let text = cap[2].trim();\r\n\r\n      // remove trailing #s\r\n      if (/#$/.test(text)) {\r\n        const trimmed = rtrim(text, '#');\r\n        if (this.options.pedantic) {\r\n          text = trimmed.trim();\r\n        } else if (!trimmed || / $/.test(trimmed)) {\r\n          // CommonMark requires space before trailing #s\r\n          text = trimmed.trim();\r\n        }\r\n      }\r\n\r\n      return {\r\n        type: 'heading',\r\n        raw: cap[0],\r\n        depth: cap[1].length,\r\n        text,\r\n        tokens: this.lexer.inline(text)\r\n      };\r\n    }\r\n  }\r\n\r\n  hr(src) {\r\n    const cap = this.rules.block.hr.exec(src);\r\n    if (cap) {\r\n      return {\r\n        type: 'hr',\r\n        raw: cap[0]\r\n      };\r\n    }\r\n  }\r\n\r\n  blockquote(src) {\r\n    const cap = this.rules.block.blockquote.exec(src);\r\n    if (cap) {\r\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\r\n      const top = this.lexer.state.top;\r\n      this.lexer.state.top = true;\r\n      const tokens = this.lexer.blockTokens(text);\r\n      this.lexer.state.top = top;\r\n      return {\r\n        type: 'blockquote',\r\n        raw: cap[0],\r\n        tokens,\r\n        text\r\n      };\r\n    }\r\n  }\r\n\r\n  list(src) {\r\n    let cap = this.rules.block.list.exec(src);\r\n    if (cap) {\r\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\r\n        line, nextLine, rawLine, itemContents, endEarly;\r\n\r\n      let bull = cap[1].trim();\r\n      const isordered = bull.length > 1;\r\n\r\n      const list = {\r\n        type: 'list',\r\n        raw: '',\r\n        ordered: isordered,\r\n        start: isordered ? +bull.slice(0, -1) : '',\r\n        loose: false,\r\n        items: []\r\n      };\r\n\r\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\r\n\r\n      if (this.options.pedantic) {\r\n        bull = isordered ? bull : '[*+-]';\r\n      }\r\n\r\n      // Get next list item\r\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\r\n\r\n      // Check if current bullet point can start a new List Item\r\n      while (src) {\r\n        endEarly = false;\r\n        if (!(cap = itemRegex.exec(src))) {\r\n          break;\r\n        }\r\n\r\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\r\n          break;\r\n        }\r\n\r\n        raw = cap[0];\r\n        src = src.substring(raw.length);\r\n\r\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\r\n        nextLine = src.split('\\n', 1)[0];\r\n\r\n        if (this.options.pedantic) {\r\n          indent = 2;\r\n          itemContents = line.trimLeft();\r\n        } else {\r\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\r\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\r\n          itemContents = line.slice(indent);\r\n          indent += cap[1].length;\r\n        }\r\n\r\n        blankLine = false;\r\n\r\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\r\n          raw += nextLine + '\\n';\r\n          src = src.substring(nextLine.length + 1);\r\n          endEarly = true;\r\n        }\r\n\r\n        if (!endEarly) {\r\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\r\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\r\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\r\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\r\n\r\n          // Check if following lines should be included in List Item\r\n          while (src) {\r\n            rawLine = src.split('\\n', 1)[0];\r\n            nextLine = rawLine;\r\n\r\n            // Re-align to follow commonmark nesting rules\r\n            if (this.options.pedantic) {\r\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\r\n            }\r\n\r\n            // End list item if found code fences\r\n            if (fencesBeginRegex.test(nextLine)) {\r\n              break;\r\n            }\r\n\r\n            // End list item if found start of new heading\r\n            if (headingBeginRegex.test(nextLine)) {\r\n              break;\r\n            }\r\n\r\n            // End list item if found start of new bullet\r\n            if (nextBulletRegex.test(nextLine)) {\r\n              break;\r\n            }\r\n\r\n            // Horizontal rule found\r\n            if (hrRegex.test(src)) {\r\n              break;\r\n            }\r\n\r\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\r\n              itemContents += '\\n' + nextLine.slice(indent);\r\n            } else {\r\n              // not enough indentation\r\n              if (blankLine) {\r\n                break;\r\n              }\r\n\r\n              // paragraph continuation unless last line was a different block level element\r\n              if (line.search(/[^ ]/) >= 4) { // indented code block\r\n                break;\r\n              }\r\n              if (fencesBeginRegex.test(line)) {\r\n                break;\r\n              }\r\n              if (headingBeginRegex.test(line)) {\r\n                break;\r\n              }\r\n              if (hrRegex.test(line)) {\r\n                break;\r\n              }\r\n\r\n              itemContents += '\\n' + nextLine;\r\n            }\r\n\r\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\r\n              blankLine = true;\r\n            }\r\n\r\n            raw += rawLine + '\\n';\r\n            src = src.substring(rawLine.length + 1);\r\n            line = nextLine.slice(indent);\r\n          }\r\n        }\r\n\r\n        if (!list.loose) {\r\n          // If the previous item ended with a blank line, the list is loose\r\n          if (endsWithBlankLine) {\r\n            list.loose = true;\r\n          } else if (/\\n *\\n *$/.test(raw)) {\r\n            endsWithBlankLine = true;\r\n          }\r\n        }\r\n\r\n        // Check for task list items\r\n        if (this.options.gfm) {\r\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\r\n          if (istask) {\r\n            ischecked = istask[0] !== '[ ] ';\r\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\r\n          }\r\n        }\r\n\r\n        list.items.push({\r\n          type: 'list_item',\r\n          raw,\r\n          task: !!istask,\r\n          checked: ischecked,\r\n          loose: false,\r\n          text: itemContents\r\n        });\r\n\r\n        list.raw += raw;\r\n      }\r\n\r\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\r\n      list.items[list.items.length - 1].raw = raw.trimRight();\r\n      list.items[list.items.length - 1].text = itemContents.trimRight();\r\n      list.raw = list.raw.trimRight();\r\n\r\n      const l = list.items.length;\r\n\r\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\r\n      for (i = 0; i < l; i++) {\r\n        this.lexer.state.top = false;\r\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\r\n\r\n        if (!list.loose) {\r\n          // Check if list should be loose\r\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\r\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\r\n\r\n          list.loose = hasMultipleLineBreaks;\r\n        }\r\n      }\r\n\r\n      // Set all items to loose if list is loose\r\n      if (list.loose) {\r\n        for (i = 0; i < l; i++) {\r\n          list.items[i].loose = true;\r\n        }\r\n      }\r\n\r\n      return list;\r\n    }\r\n  }\r\n\r\n  html(src) {\r\n    const cap = this.rules.block.html.exec(src);\r\n    if (cap) {\r\n      const token = {\r\n        type: 'html',\r\n        block: true,\r\n        raw: cap[0],\r\n        pre: !this.options.sanitizer\r\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\r\n        text: cap[0]\r\n      };\r\n      if (this.options.sanitize) {\r\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\r\n        token.type = 'paragraph';\r\n        token.text = text;\r\n        token.tokens = this.lexer.inline(text);\r\n      }\r\n      return token;\r\n    }\r\n  }\r\n\r\n  def(src) {\r\n    const cap = this.rules.block.def.exec(src);\r\n    if (cap) {\r\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\r\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\r\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\r\n      return {\r\n        type: 'def',\r\n        tag,\r\n        raw: cap[0],\r\n        href,\r\n        title\r\n      };\r\n    }\r\n  }\r\n\r\n  table(src) {\r\n    const cap = this.rules.block.table.exec(src);\r\n    if (cap) {\r\n      const item = {\r\n        type: 'table',\r\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\r\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\r\n      };\r\n\r\n      if (item.header.length === item.align.length) {\r\n        item.raw = cap[0];\r\n\r\n        let l = item.align.length;\r\n        let i, j, k, row;\r\n        for (i = 0; i < l; i++) {\r\n          if (/^ *-+: *$/.test(item.align[i])) {\r\n            item.align[i] = 'right';\r\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n            item.align[i] = 'center';\r\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n            item.align[i] = 'left';\r\n          } else {\r\n            item.align[i] = null;\r\n          }\r\n        }\r\n\r\n        l = item.rows.length;\r\n        for (i = 0; i < l; i++) {\r\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\r\n        }\r\n\r\n        // parse child tokens inside headers and cells\r\n\r\n        // header child tokens\r\n        l = item.header.length;\r\n        for (j = 0; j < l; j++) {\r\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\r\n        }\r\n\r\n        // cell child tokens\r\n        l = item.rows.length;\r\n        for (j = 0; j < l; j++) {\r\n          row = item.rows[j];\r\n          for (k = 0; k < row.length; k++) {\r\n            row[k].tokens = this.lexer.inline(row[k].text);\r\n          }\r\n        }\r\n\r\n        return item;\r\n      }\r\n    }\r\n  }\r\n\r\n  lheading(src) {\r\n    const cap = this.rules.block.lheading.exec(src);\r\n    if (cap) {\r\n      return {\r\n        type: 'heading',\r\n        raw: cap[0],\r\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\r\n        text: cap[1],\r\n        tokens: this.lexer.inline(cap[1])\r\n      };\r\n    }\r\n  }\r\n\r\n  paragraph(src) {\r\n    const cap = this.rules.block.paragraph.exec(src);\r\n    if (cap) {\r\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\r\n        ? cap[1].slice(0, -1)\r\n        : cap[1];\r\n      return {\r\n        type: 'paragraph',\r\n        raw: cap[0],\r\n        text,\r\n        tokens: this.lexer.inline(text)\r\n      };\r\n    }\r\n  }\r\n\r\n  text(src) {\r\n    const cap = this.rules.block.text.exec(src);\r\n    if (cap) {\r\n      return {\r\n        type: 'text',\r\n        raw: cap[0],\r\n        text: cap[0],\r\n        tokens: this.lexer.inline(cap[0])\r\n      };\r\n    }\r\n  }\r\n\r\n  escape(src) {\r\n    const cap = this.rules.inline.escape.exec(src);\r\n    if (cap) {\r\n      return {\r\n        type: 'escape',\r\n        raw: cap[0],\r\n        text: escape(cap[1])\r\n      };\r\n    }\r\n  }\r\n\r\n  tag(src) {\r\n    const cap = this.rules.inline.tag.exec(src);\r\n    if (cap) {\r\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\r\n        this.lexer.state.inLink = true;\r\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\r\n        this.lexer.state.inLink = false;\r\n      }\r\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\r\n        this.lexer.state.inRawBlock = true;\r\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\r\n        this.lexer.state.inRawBlock = false;\r\n      }\r\n\r\n      return {\r\n        type: this.options.sanitize\r\n          ? 'text'\r\n          : 'html',\r\n        raw: cap[0],\r\n        inLink: this.lexer.state.inLink,\r\n        inRawBlock: this.lexer.state.inRawBlock,\r\n        block: false,\r\n        text: this.options.sanitize\r\n          ? (this.options.sanitizer\r\n            ? this.options.sanitizer(cap[0])\r\n            : escape(cap[0]))\r\n          : cap[0]\r\n      };\r\n    }\r\n  }\r\n\r\n  link(src) {\r\n    const cap = this.rules.inline.link.exec(src);\r\n    if (cap) {\r\n      const trimmedUrl = cap[2].trim();\r\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\r\n        // commonmark requires matching angle brackets\r\n        if (!(/>$/.test(trimmedUrl))) {\r\n          return;\r\n        }\r\n\r\n        // ending angle bracket cannot be escaped\r\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\r\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\r\n          return;\r\n        }\r\n      } else {\r\n        // find closing parenthesis\r\n        const lastParenIndex = findClosingBracket(cap[2], '()');\r\n        if (lastParenIndex > -1) {\r\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\r\n          const linkLen = start + cap[1].length + lastParenIndex;\r\n          cap[2] = cap[2].substring(0, lastParenIndex);\r\n          cap[0] = cap[0].substring(0, linkLen).trim();\r\n          cap[3] = '';\r\n        }\r\n      }\r\n      let href = cap[2];\r\n      let title = '';\r\n      if (this.options.pedantic) {\r\n        // split pedantic href and title\r\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\r\n\r\n        if (link) {\r\n          href = link[1];\r\n          title = link[3];\r\n        }\r\n      } else {\r\n        title = cap[3] ? cap[3].slice(1, -1) : '';\r\n      }\r\n\r\n      href = href.trim();\r\n      if (/^</.test(href)) {\r\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\r\n          // pedantic allows starting angle bracket without ending angle bracket\r\n          href = href.slice(1);\r\n        } else {\r\n          href = href.slice(1, -1);\r\n        }\r\n      }\r\n      return outputLink(cap, {\r\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\r\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\r\n      }, cap[0], this.lexer);\r\n    }\r\n  }\r\n\r\n  reflink(src, links) {\r\n    let cap;\r\n    if ((cap = this.rules.inline.reflink.exec(src))\r\n        || (cap = this.rules.inline.nolink.exec(src))) {\r\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\r\n      link = links[link.toLowerCase()];\r\n      if (!link) {\r\n        const text = cap[0].charAt(0);\r\n        return {\r\n          type: 'text',\r\n          raw: text,\r\n          text\r\n        };\r\n      }\r\n      return outputLink(cap, link, cap[0], this.lexer);\r\n    }\r\n  }\r\n\r\n  emStrong(src, maskedSrc, prevChar = '') {\r\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\r\n    if (!match) return;\r\n\r\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\r\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\r\n\r\n    const nextChar = match[1] || match[2] || '';\r\n\r\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\r\n      const lLength = match[0].length - 1;\r\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\r\n\r\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\r\n      endReg.lastIndex = 0;\r\n\r\n      // Clip maskedSrc to same section of string as src (move to lexer?)\r\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\r\n\r\n      while ((match = endReg.exec(maskedSrc)) != null) {\r\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\r\n\r\n        if (!rDelim) continue; // skip single * in __abc*abc__\r\n\r\n        rLength = rDelim.length;\r\n\r\n        if (match[3] || match[4]) { // found another Left Delim\r\n          delimTotal += rLength;\r\n          continue;\r\n        } else if (match[5] || match[6]) { // either Left or Right Delim\r\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\r\n            midDelimTotal += rLength;\r\n            continue; // CommonMark Emphasis Rules 9-10\r\n          }\r\n        }\r\n\r\n        delimTotal -= rLength;\r\n\r\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\r\n\r\n        // Remove extra characters. *a*** -> *a*\r\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\r\n\r\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\r\n\r\n        // Create `em` if smallest delimiter has odd char count. *a***\r\n        if (Math.min(lLength, rLength) % 2) {\r\n          const text = raw.slice(1, -1);\r\n          return {\r\n            type: 'em',\r\n            raw,\r\n            text,\r\n            tokens: this.lexer.inlineTokens(text)\r\n          };\r\n        }\r\n\r\n        // Create 'strong' if smallest delimiter has even char count. **a***\r\n        const text = raw.slice(2, -2);\r\n        return {\r\n          type: 'strong',\r\n          raw,\r\n          text,\r\n          tokens: this.lexer.inlineTokens(text)\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  codespan(src) {\r\n    const cap = this.rules.inline.code.exec(src);\r\n    if (cap) {\r\n      let text = cap[2].replace(/\\n/g, ' ');\r\n      const hasNonSpaceChars = /[^ ]/.test(text);\r\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\r\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\r\n        text = text.substring(1, text.length - 1);\r\n      }\r\n      text = escape(text, true);\r\n      return {\r\n        type: 'codespan',\r\n        raw: cap[0],\r\n        text\r\n      };\r\n    }\r\n  }\r\n\r\n  br(src) {\r\n    const cap = this.rules.inline.br.exec(src);\r\n    if (cap) {\r\n      return {\r\n        type: 'br',\r\n        raw: cap[0]\r\n      };\r\n    }\r\n  }\r\n\r\n  del(src) {\r\n    const cap = this.rules.inline.del.exec(src);\r\n    if (cap) {\r\n      return {\r\n        type: 'del',\r\n        raw: cap[0],\r\n        text: cap[2],\r\n        tokens: this.lexer.inlineTokens(cap[2])\r\n      };\r\n    }\r\n  }\r\n\r\n  autolink(src, mangle) {\r\n    const cap = this.rules.inline.autolink.exec(src);\r\n    if (cap) {\r\n      let text, href;\r\n      if (cap[2] === '@') {\r\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\r\n        href = 'mailto:' + text;\r\n      } else {\r\n        text = escape(cap[1]);\r\n        href = text;\r\n      }\r\n\r\n      return {\r\n        type: 'link',\r\n        raw: cap[0],\r\n        text,\r\n        href,\r\n        tokens: [\r\n          {\r\n            type: 'text',\r\n            raw: text,\r\n            text\r\n          }\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  url(src, mangle) {\r\n    let cap;\r\n    if (cap = this.rules.inline.url.exec(src)) {\r\n      let text, href;\r\n      if (cap[2] === '@') {\r\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\r\n        href = 'mailto:' + text;\r\n      } else {\r\n        // do extended autolink path validation\r\n        let prevCapZero;\r\n        do {\r\n          prevCapZero = cap[0];\r\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\r\n        } while (prevCapZero !== cap[0]);\r\n        text = escape(cap[0]);\r\n        if (cap[1] === 'www.') {\r\n          href = 'http://' + cap[0];\r\n        } else {\r\n          href = cap[0];\r\n        }\r\n      }\r\n      return {\r\n        type: 'link',\r\n        raw: cap[0],\r\n        text,\r\n        href,\r\n        tokens: [\r\n          {\r\n            type: 'text',\r\n            raw: text,\r\n            text\r\n          }\r\n        ]\r\n      };\r\n    }\r\n  }\r\n\r\n  inlineText(src, smartypants) {\r\n    const cap = this.rules.inline.text.exec(src);\r\n    if (cap) {\r\n      let text;\r\n      if (this.lexer.state.inRawBlock) {\r\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\r\n      } else {\r\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\r\n      }\r\n      return {\r\n        type: 'text',\r\n        raw: cap[0],\r\n        text\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Block-Level Grammar\r\n */\r\nconst block = {\r\n  newline: /^(?: *(?:\\n|$))+/,\r\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\r\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\r\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\r\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\r\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\r\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\r\n  html: '^ {0,3}(?:' // optional indentation\r\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\r\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\r\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\r\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\r\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\r\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\r\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\r\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\r\n    + ')',\r\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\r\n  table: noopTest,\r\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\r\n  // regex template, placeholders will be replaced according to different paragraph\r\n  // interruption rules of commonmark and the original markdown spec:\r\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\r\n  text: /^[^\\n]+/\r\n};\r\n\r\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\r\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\r\nblock.def = edit(block.def)\r\n  .replace('label', block._label)\r\n  .replace('title', block._title)\r\n  .getRegex();\r\n\r\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\r\nblock.listItemStart = edit(/^( *)(bull) */)\r\n  .replace('bull', block.bullet)\r\n  .getRegex();\r\n\r\nblock.list = edit(block.list)\r\n  .replace(/bull/g, block.bullet)\r\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\r\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\r\n  .getRegex();\r\n\r\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\r\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\r\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\r\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\r\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\r\n  + '|track|ul';\r\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\r\nblock.html = edit(block.html, 'i')\r\n  .replace('comment', block._comment)\r\n  .replace('tag', block._tag)\r\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\r\n  .getRegex();\r\n\r\nblock.lheading = edit(block.lheading)\r\n  .replace(/bull/g, block.bullet) // lists can interrupt\r\n  .getRegex();\r\n\r\nblock.paragraph = edit(block._paragraph)\r\n  .replace('hr', block.hr)\r\n  .replace('heading', ' {0,3}#{1,6} ')\r\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\r\n  .replace('|table', '')\r\n  .replace('blockquote', ' {0,3}>')\r\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\r\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\r\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n\r\nblock.blockquote = edit(block.blockquote)\r\n  .replace('paragraph', block.paragraph)\r\n  .getRegex();\r\n\r\n/**\r\n * Normal Block Grammar\r\n */\r\n\r\nblock.normal = { ...block };\r\n\r\n/**\r\n * GFM Block Grammar\r\n */\r\n\r\nblock.gfm = {\r\n  ...block.normal,\r\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\r\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\r\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\r\n};\r\n\r\nblock.gfm.table = edit(block.gfm.table)\r\n  .replace('hr', block.hr)\r\n  .replace('heading', ' {0,3}#{1,6} ')\r\n  .replace('blockquote', ' {0,3}>')\r\n  .replace('code', ' {4}[^\\\\n]')\r\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\r\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\r\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n\r\nblock.gfm.paragraph = edit(block._paragraph)\r\n  .replace('hr', block.hr)\r\n  .replace('heading', ' {0,3}#{1,6} ')\r\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\r\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\r\n  .replace('blockquote', ' {0,3}>')\r\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\r\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\r\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n/**\r\n * Pedantic grammar (original John Gruber's loose markdown specification)\r\n */\r\n\r\nblock.pedantic = {\r\n  ...block.normal,\r\n  html: edit(\r\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\r\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\r\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\r\n    .replace('comment', block._comment)\r\n    .replace(/tag/g, '(?!(?:'\r\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\r\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\r\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\r\n    .getRegex(),\r\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\r\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\r\n  fences: noopTest, // fences not supported\r\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\r\n  paragraph: edit(block.normal._paragraph)\r\n    .replace('hr', block.hr)\r\n    .replace('heading', ' *#{1,6} *[^\\n]')\r\n    .replace('lheading', block.lheading)\r\n    .replace('blockquote', ' {0,3}>')\r\n    .replace('|fences', '')\r\n    .replace('|list', '')\r\n    .replace('|html', '')\r\n    .getRegex()\r\n};\r\n\r\n/**\r\n * Inline-Level Grammar\r\n */\r\nconst inline = {\r\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\r\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\r\n  url: noopTest,\r\n  tag: '^comment'\r\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\r\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\r\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\r\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\r\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\r\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\r\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\r\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\r\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\r\n  emStrong: {\r\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\r\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\r\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\r\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\r\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\r\n  },\r\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\r\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\r\n  del: noopTest,\r\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\r\n  punctuation: /^((?![*_])[\\spunctuation])/\r\n};\r\n\r\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\r\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\r\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\r\n\r\n// sequences em should skip over [title](link), `code`, <html>\r\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\r\ninline.anyPunctuation = /\\\\[punct]/g;\r\ninline._escapes = /\\\\([punct])/g;\r\n\r\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\r\n\r\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\r\n  .replace(/punct/g, inline._punctuation)\r\n  .getRegex();\r\n\r\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\r\n  .replace(/punct/g, inline._punctuation)\r\n  .getRegex();\r\n\r\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\r\n  .replace(/punct/g, inline._punctuation)\r\n  .getRegex();\r\n\r\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\r\n  .replace(/punct/g, inline._punctuation)\r\n  .getRegex();\r\n\r\ninline._escapes = edit(inline._escapes, 'gu')\r\n  .replace(/punct/g, inline._punctuation)\r\n  .getRegex();\r\n\r\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\r\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\r\ninline.autolink = edit(inline.autolink)\r\n  .replace('scheme', inline._scheme)\r\n  .replace('email', inline._email)\r\n  .getRegex();\r\n\r\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\r\n\r\ninline.tag = edit(inline.tag)\r\n  .replace('comment', inline._comment)\r\n  .replace('attribute', inline._attribute)\r\n  .getRegex();\r\n\r\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\r\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\r\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\r\n\r\ninline.link = edit(inline.link)\r\n  .replace('label', inline._label)\r\n  .replace('href', inline._href)\r\n  .replace('title', inline._title)\r\n  .getRegex();\r\n\r\ninline.reflink = edit(inline.reflink)\r\n  .replace('label', inline._label)\r\n  .replace('ref', block._label)\r\n  .getRegex();\r\n\r\ninline.nolink = edit(inline.nolink)\r\n  .replace('ref', block._label)\r\n  .getRegex();\r\n\r\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\r\n  .replace('reflink', inline.reflink)\r\n  .replace('nolink', inline.nolink)\r\n  .getRegex();\r\n\r\n/**\r\n * Normal Inline Grammar\r\n */\r\n\r\ninline.normal = { ...inline };\r\n\r\n/**\r\n * Pedantic Inline Grammar\r\n */\r\n\r\ninline.pedantic = {\r\n  ...inline.normal,\r\n  strong: {\r\n    start: /^__|\\*\\*/,\r\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\r\n    endAst: /\\*\\*(?!\\*)/g,\r\n    endUnd: /__(?!_)/g\r\n  },\r\n  em: {\r\n    start: /^_|\\*/,\r\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\r\n    endAst: /\\*(?!\\*)/g,\r\n    endUnd: /_(?!_)/g\r\n  },\r\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\r\n    .replace('label', inline._label)\r\n    .getRegex(),\r\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\r\n    .replace('label', inline._label)\r\n    .getRegex()\r\n};\r\n\r\n/**\r\n * GFM Inline Grammar\r\n */\r\n\r\ninline.gfm = {\r\n  ...inline.normal,\r\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\r\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\r\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\r\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\r\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\r\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\r\n};\r\n\r\ninline.gfm.url = edit(inline.gfm.url, 'i')\r\n  .replace('email', inline.gfm._extended_email)\r\n  .getRegex();\r\n/**\r\n * GFM + Line Breaks Inline Grammar\r\n */\r\n\r\ninline.breaks = {\r\n  ...inline.gfm,\r\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\r\n  text: edit(inline.gfm.text)\r\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\r\n    .replace(/\\{2,\\}/g, '*')\r\n    .getRegex()\r\n};\r\n\r\n/**\r\n * smartypants text replacement\r\n * @param {string} text\r\n */\r\nfunction smartypants(text) {\r\n  return text\r\n    // em-dashes\r\n    .replace(/---/g, '\\u2014')\r\n    // en-dashes\r\n    .replace(/--/g, '\\u2013')\r\n    // opening singles\r\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\r\n    // closing singles & apostrophes\r\n    .replace(/'/g, '\\u2019')\r\n    // opening doubles\r\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\r\n    // closing doubles\r\n    .replace(/\"/g, '\\u201d')\r\n    // ellipses\r\n    .replace(/\\.{3}/g, '\\u2026');\r\n}\r\n\r\n/**\r\n * mangle email addresses\r\n * @param {string} text\r\n */\r\nfunction mangle(text) {\r\n  let out = '',\r\n    i,\r\n    ch;\r\n\r\n  const l = text.length;\r\n  for (i = 0; i < l; i++) {\r\n    ch = text.charCodeAt(i);\r\n    if (Math.random() > 0.5) {\r\n      ch = 'x' + ch.toString(16);\r\n    }\r\n    out += '&#' + ch + ';';\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Block Lexer\r\n */\r\nclass Lexer {\r\n  constructor(options) {\r\n    this.tokens = [];\r\n    this.tokens.links = Object.create(null);\r\n    this.options = options || defaults;\r\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\r\n    this.tokenizer = this.options.tokenizer;\r\n    this.tokenizer.options = this.options;\r\n    this.tokenizer.lexer = this;\r\n    this.inlineQueue = [];\r\n    this.state = {\r\n      inLink: false,\r\n      inRawBlock: false,\r\n      top: true\r\n    };\r\n\r\n    const rules = {\r\n      block: block.normal,\r\n      inline: inline.normal\r\n    };\r\n\r\n    if (this.options.pedantic) {\r\n      rules.block = block.pedantic;\r\n      rules.inline = inline.pedantic;\r\n    } else if (this.options.gfm) {\r\n      rules.block = block.gfm;\r\n      if (this.options.breaks) {\r\n        rules.inline = inline.breaks;\r\n      } else {\r\n        rules.inline = inline.gfm;\r\n      }\r\n    }\r\n    this.tokenizer.rules = rules;\r\n  }\r\n\r\n  /**\r\n   * Expose Rules\r\n   */\r\n  static get rules() {\r\n    return {\r\n      block,\r\n      inline\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Static Lex Method\r\n   */\r\n  static lex(src, options) {\r\n    const lexer = new Lexer(options);\r\n    return lexer.lex(src);\r\n  }\r\n\r\n  /**\r\n   * Static Lex Inline Method\r\n   */\r\n  static lexInline(src, options) {\r\n    const lexer = new Lexer(options);\r\n    return lexer.inlineTokens(src);\r\n  }\r\n\r\n  /**\r\n   * Preprocessing\r\n   */\r\n  lex(src) {\r\n    src = src\r\n      .replace(/\\r\\n|\\r/g, '\\n');\r\n\r\n    this.blockTokens(src, this.tokens);\r\n\r\n    let next;\r\n    while (next = this.inlineQueue.shift()) {\r\n      this.inlineTokens(next.src, next.tokens);\r\n    }\r\n\r\n    return this.tokens;\r\n  }\r\n\r\n  /**\r\n   * Lexing\r\n   */\r\n  blockTokens(src, tokens = []) {\r\n    if (this.options.pedantic) {\r\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\r\n    } else {\r\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\r\n        return leading + '    '.repeat(tabs.length);\r\n      });\r\n    }\r\n\r\n    let token, lastToken, cutSrc, lastParagraphClipped;\r\n\r\n    while (src) {\r\n      if (this.options.extensions\r\n        && this.options.extensions.block\r\n        && this.options.extensions.block.some((extTokenizer) => {\r\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\r\n            src = src.substring(token.raw.length);\r\n            tokens.push(token);\r\n            return true;\r\n          }\r\n          return false;\r\n        })) {\r\n        continue;\r\n      }\r\n\r\n      // newline\r\n      if (token = this.tokenizer.space(src)) {\r\n        src = src.substring(token.raw.length);\r\n        if (token.raw.length === 1 && tokens.length > 0) {\r\n          // if there's a single \\n as a spacer, it's terminating the last line,\r\n          // so move it there so that we don't get unecessary paragraph tags\r\n          tokens[tokens.length - 1].raw += '\\n';\r\n        } else {\r\n          tokens.push(token);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // code\r\n      if (token = this.tokenizer.code(src)) {\r\n        src = src.substring(token.raw.length);\r\n        lastToken = tokens[tokens.length - 1];\r\n        // An indented code block cannot interrupt a paragraph.\r\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\r\n          lastToken.raw += '\\n' + token.raw;\r\n          lastToken.text += '\\n' + token.text;\r\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\r\n        } else {\r\n          tokens.push(token);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // fences\r\n      if (token = this.tokenizer.fences(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // heading\r\n      if (token = this.tokenizer.heading(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // hr\r\n      if (token = this.tokenizer.hr(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // blockquote\r\n      if (token = this.tokenizer.blockquote(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // list\r\n      if (token = this.tokenizer.list(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // html\r\n      if (token = this.tokenizer.html(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // def\r\n      if (token = this.tokenizer.def(src)) {\r\n        src = src.substring(token.raw.length);\r\n        lastToken = tokens[tokens.length - 1];\r\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\r\n          lastToken.raw += '\\n' + token.raw;\r\n          lastToken.text += '\\n' + token.raw;\r\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\r\n        } else if (!this.tokens.links[token.tag]) {\r\n          this.tokens.links[token.tag] = {\r\n            href: token.href,\r\n            title: token.title\r\n          };\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // table (gfm)\r\n      if (token = this.tokenizer.table(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // lheading\r\n      if (token = this.tokenizer.lheading(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // top-level paragraph\r\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\r\n      cutSrc = src;\r\n      if (this.options.extensions && this.options.extensions.startBlock) {\r\n        let startIndex = Infinity;\r\n        const tempSrc = src.slice(1);\r\n        let tempStart;\r\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\r\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\r\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\r\n        });\r\n        if (startIndex < Infinity && startIndex >= 0) {\r\n          cutSrc = src.substring(0, startIndex + 1);\r\n        }\r\n      }\r\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\r\n        lastToken = tokens[tokens.length - 1];\r\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\r\n          lastToken.raw += '\\n' + token.raw;\r\n          lastToken.text += '\\n' + token.text;\r\n          this.inlineQueue.pop();\r\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\r\n        } else {\r\n          tokens.push(token);\r\n        }\r\n        lastParagraphClipped = (cutSrc.length !== src.length);\r\n        src = src.substring(token.raw.length);\r\n        continue;\r\n      }\r\n\r\n      // text\r\n      if (token = this.tokenizer.text(src)) {\r\n        src = src.substring(token.raw.length);\r\n        lastToken = tokens[tokens.length - 1];\r\n        if (lastToken && lastToken.type === 'text') {\r\n          lastToken.raw += '\\n' + token.raw;\r\n          lastToken.text += '\\n' + token.text;\r\n          this.inlineQueue.pop();\r\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\r\n        } else {\r\n          tokens.push(token);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (src) {\r\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\r\n        if (this.options.silent) {\r\n          console.error(errMsg);\r\n          break;\r\n        } else {\r\n          throw new Error(errMsg);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.state.top = true;\r\n    return tokens;\r\n  }\r\n\r\n  inline(src, tokens = []) {\r\n    this.inlineQueue.push({ src, tokens });\r\n    return tokens;\r\n  }\r\n\r\n  /**\r\n   * Lexing/Compiling\r\n   */\r\n  inlineTokens(src, tokens = []) {\r\n    let token, lastToken, cutSrc;\r\n\r\n    // String with links masked to avoid interference with em and strong\r\n    let maskedSrc = src;\r\n    let match;\r\n    let keepPrevChar, prevChar;\r\n\r\n    // Mask out reflinks\r\n    if (this.tokens.links) {\r\n      const links = Object.keys(this.tokens.links);\r\n      if (links.length > 0) {\r\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\r\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\r\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Mask out other blocks\r\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\r\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\r\n    }\r\n\r\n    // Mask out escaped characters\r\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\r\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\r\n    }\r\n\r\n    while (src) {\r\n      if (!keepPrevChar) {\r\n        prevChar = '';\r\n      }\r\n      keepPrevChar = false;\r\n\r\n      // extensions\r\n      if (this.options.extensions\r\n        && this.options.extensions.inline\r\n        && this.options.extensions.inline.some((extTokenizer) => {\r\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\r\n            src = src.substring(token.raw.length);\r\n            tokens.push(token);\r\n            return true;\r\n          }\r\n          return false;\r\n        })) {\r\n        continue;\r\n      }\r\n\r\n      // escape\r\n      if (token = this.tokenizer.escape(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // tag\r\n      if (token = this.tokenizer.tag(src)) {\r\n        src = src.substring(token.raw.length);\r\n        lastToken = tokens[tokens.length - 1];\r\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\r\n          lastToken.raw += token.raw;\r\n          lastToken.text += token.text;\r\n        } else {\r\n          tokens.push(token);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // link\r\n      if (token = this.tokenizer.link(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // reflink, nolink\r\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\r\n        src = src.substring(token.raw.length);\r\n        lastToken = tokens[tokens.length - 1];\r\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\r\n          lastToken.raw += token.raw;\r\n          lastToken.text += token.text;\r\n        } else {\r\n          tokens.push(token);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // em & strong\r\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // code\r\n      if (token = this.tokenizer.codespan(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // br\r\n      if (token = this.tokenizer.br(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // del (gfm)\r\n      if (token = this.tokenizer.del(src)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // autolink\r\n      if (token = this.tokenizer.autolink(src, mangle)) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // url (gfm)\r\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\r\n        src = src.substring(token.raw.length);\r\n        tokens.push(token);\r\n        continue;\r\n      }\r\n\r\n      // text\r\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\r\n      cutSrc = src;\r\n      if (this.options.extensions && this.options.extensions.startInline) {\r\n        let startIndex = Infinity;\r\n        const tempSrc = src.slice(1);\r\n        let tempStart;\r\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\r\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\r\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\r\n        });\r\n        if (startIndex < Infinity && startIndex >= 0) {\r\n          cutSrc = src.substring(0, startIndex + 1);\r\n        }\r\n      }\r\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\r\n        src = src.substring(token.raw.length);\r\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\r\n          prevChar = token.raw.slice(-1);\r\n        }\r\n        keepPrevChar = true;\r\n        lastToken = tokens[tokens.length - 1];\r\n        if (lastToken && lastToken.type === 'text') {\r\n          lastToken.raw += token.raw;\r\n          lastToken.text += token.text;\r\n        } else {\r\n          tokens.push(token);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (src) {\r\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\r\n        if (this.options.silent) {\r\n          console.error(errMsg);\r\n          break;\r\n        } else {\r\n          throw new Error(errMsg);\r\n        }\r\n      }\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n}\r\n\r\n/**\r\n * Renderer\r\n */\r\nclass Renderer {\r\n  constructor(options) {\r\n    this.options = options || defaults;\r\n  }\r\n\r\n  code(code, infostring, escaped) {\r\n    const lang = (infostring || '').match(/\\S*/)[0];\r\n    if (this.options.highlight) {\r\n      const out = this.options.highlight(code, lang);\r\n      if (out != null && out !== code) {\r\n        escaped = true;\r\n        code = out;\r\n      }\r\n    }\r\n\r\n    code = code.replace(/\\n$/, '') + '\\n';\r\n\r\n    if (!lang) {\r\n      return '<pre><code>'\r\n        + (escaped ? code : escape(code, true))\r\n        + '</code></pre>\\n';\r\n    }\r\n\r\n    return '<pre><code class=\"'\r\n      + this.options.langPrefix\r\n      + escape(lang)\r\n      + '\">'\r\n      + (escaped ? code : escape(code, true))\r\n      + '</code></pre>\\n';\r\n  }\r\n\r\n  /**\r\n   * @param {string} quote\r\n   */\r\n  blockquote(quote) {\r\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\r\n  }\r\n\r\n  html(html, block) {\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   * @param {string} level\r\n   * @param {string} raw\r\n   * @param {any} slugger\r\n   */\r\n  heading(text, level, raw, slugger) {\r\n    if (this.options.headerIds) {\r\n      const id = this.options.headerPrefix + slugger.slug(raw);\r\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\r\n    }\r\n\r\n    // ignore IDs\r\n    return `<h${level}>${text}</h${level}>\\n`;\r\n  }\r\n\r\n  hr() {\r\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\r\n  }\r\n\r\n  list(body, ordered, start) {\r\n    const type = ordered ? 'ol' : 'ul',\r\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\r\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   */\r\n  listitem(text) {\r\n    return `<li>${text}</li>\\n`;\r\n  }\r\n\r\n  checkbox(checked) {\r\n    return '<input '\r\n      + (checked ? 'checked=\"\" ' : '')\r\n      + 'disabled=\"\" type=\"checkbox\"'\r\n      + (this.options.xhtml ? ' /' : '')\r\n      + '> ';\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   */\r\n  paragraph(text) {\r\n    return `<p>${text}</p>\\n`;\r\n  }\r\n\r\n  /**\r\n   * @param {string} header\r\n   * @param {string} body\r\n   */\r\n  table(header, body) {\r\n    if (body) body = `<tbody>${body}</tbody>`;\r\n\r\n    return '<table>\\n'\r\n      + '<thead>\\n'\r\n      + header\r\n      + '</thead>\\n'\r\n      + body\r\n      + '</table>\\n';\r\n  }\r\n\r\n  /**\r\n   * @param {string} content\r\n   */\r\n  tablerow(content) {\r\n    return `<tr>\\n${content}</tr>\\n`;\r\n  }\r\n\r\n  tablecell(content, flags) {\r\n    const type = flags.header ? 'th' : 'td';\r\n    const tag = flags.align\r\n      ? `<${type} align=\"${flags.align}\">`\r\n      : `<${type}>`;\r\n    return tag + content + `</${type}>\\n`;\r\n  }\r\n\r\n  /**\r\n   * span level renderer\r\n   * @param {string} text\r\n   */\r\n  strong(text) {\r\n    return `<strong>${text}</strong>`;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   */\r\n  em(text) {\r\n    return `<em>${text}</em>`;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   */\r\n  codespan(text) {\r\n    return `<code>${text}</code>`;\r\n  }\r\n\r\n  br() {\r\n    return this.options.xhtml ? '<br/>' : '<br>';\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   */\r\n  del(text) {\r\n    return `<del>${text}</del>`;\r\n  }\r\n\r\n  /**\r\n   * @param {string} href\r\n   * @param {string} title\r\n   * @param {string} text\r\n   */\r\n  link(href, title, text) {\r\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\r\n    if (href === null) {\r\n      return text;\r\n    }\r\n    let out = '<a href=\"' + href + '\"';\r\n    if (title) {\r\n      out += ' title=\"' + title + '\"';\r\n    }\r\n    out += '>' + text + '</a>';\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * @param {string} href\r\n   * @param {string} title\r\n   * @param {string} text\r\n   */\r\n  image(href, title, text) {\r\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\r\n    if (href === null) {\r\n      return text;\r\n    }\r\n\r\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\r\n    if (title) {\r\n      out += ` title=\"${title}\"`;\r\n    }\r\n    out += this.options.xhtml ? '/>' : '>';\r\n    return out;\r\n  }\r\n\r\n  text(text) {\r\n    return text;\r\n  }\r\n}\r\n\r\n/**\r\n * TextRenderer\r\n * returns only the textual part of the token\r\n */\r\nclass TextRenderer {\r\n  // no need for block level renderers\r\n  strong(text) {\r\n    return text;\r\n  }\r\n\r\n  em(text) {\r\n    return text;\r\n  }\r\n\r\n  codespan(text) {\r\n    return text;\r\n  }\r\n\r\n  del(text) {\r\n    return text;\r\n  }\r\n\r\n  html(text) {\r\n    return text;\r\n  }\r\n\r\n  text(text) {\r\n    return text;\r\n  }\r\n\r\n  link(href, title, text) {\r\n    return '' + text;\r\n  }\r\n\r\n  image(href, title, text) {\r\n    return '' + text;\r\n  }\r\n\r\n  br() {\r\n    return '';\r\n  }\r\n}\r\n\r\n/**\r\n * Slugger generates header id\r\n */\r\nclass Slugger {\r\n  constructor() {\r\n    this.seen = {};\r\n  }\r\n\r\n  /**\r\n   * @param {string} value\r\n   */\r\n  serialize(value) {\r\n    return value\r\n      .toLowerCase()\r\n      .trim()\r\n      // remove html tags\r\n      .replace(/<[!\\/a-z].*?>/ig, '')\r\n      // remove unwanted chars\r\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\r\n      .replace(/\\s/g, '-');\r\n  }\r\n\r\n  /**\r\n   * Finds the next safe (unique) slug to use\r\n   * @param {string} originalSlug\r\n   * @param {boolean} isDryRun\r\n   */\r\n  getNextSafeSlug(originalSlug, isDryRun) {\r\n    let slug = originalSlug;\r\n    let occurenceAccumulator = 0;\r\n    if (this.seen.hasOwnProperty(slug)) {\r\n      occurenceAccumulator = this.seen[originalSlug];\r\n      do {\r\n        occurenceAccumulator++;\r\n        slug = originalSlug + '-' + occurenceAccumulator;\r\n      } while (this.seen.hasOwnProperty(slug));\r\n    }\r\n    if (!isDryRun) {\r\n      this.seen[originalSlug] = occurenceAccumulator;\r\n      this.seen[slug] = 0;\r\n    }\r\n    return slug;\r\n  }\r\n\r\n  /**\r\n   * Convert string to unique id\r\n   * @param {object} [options]\r\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\r\n   * updating the internal accumulator.\r\n   */\r\n  slug(value, options = {}) {\r\n    const slug = this.serialize(value);\r\n    return this.getNextSafeSlug(slug, options.dryrun);\r\n  }\r\n}\r\n\r\n/**\r\n * Parsing & Compiling\r\n */\r\nclass Parser {\r\n  constructor(options) {\r\n    this.options = options || defaults;\r\n    this.options.renderer = this.options.renderer || new Renderer();\r\n    this.renderer = this.options.renderer;\r\n    this.renderer.options = this.options;\r\n    this.textRenderer = new TextRenderer();\r\n    this.slugger = new Slugger();\r\n  }\r\n\r\n  /**\r\n   * Static Parse Method\r\n   */\r\n  static parse(tokens, options) {\r\n    const parser = new Parser(options);\r\n    return parser.parse(tokens);\r\n  }\r\n\r\n  /**\r\n   * Static Parse Inline Method\r\n   */\r\n  static parseInline(tokens, options) {\r\n    const parser = new Parser(options);\r\n    return parser.parseInline(tokens);\r\n  }\r\n\r\n  /**\r\n   * Parse Loop\r\n   */\r\n  parse(tokens, top = true) {\r\n    let out = '',\r\n      i,\r\n      j,\r\n      k,\r\n      l2,\r\n      l3,\r\n      row,\r\n      cell,\r\n      header,\r\n      body,\r\n      token,\r\n      ordered,\r\n      start,\r\n      loose,\r\n      itemBody,\r\n      item,\r\n      checked,\r\n      task,\r\n      checkbox,\r\n      ret;\r\n\r\n    const l = tokens.length;\r\n    for (i = 0; i < l; i++) {\r\n      token = tokens[i];\r\n\r\n      // Run any renderer extensions\r\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\r\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\r\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\r\n          out += ret || '';\r\n          continue;\r\n        }\r\n      }\r\n\r\n      switch (token.type) {\r\n        case 'space': {\r\n          continue;\r\n        }\r\n        case 'hr': {\r\n          out += this.renderer.hr();\r\n          continue;\r\n        }\r\n        case 'heading': {\r\n          out += this.renderer.heading(\r\n            this.parseInline(token.tokens),\r\n            token.depth,\r\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\r\n            this.slugger);\r\n          continue;\r\n        }\r\n        case 'code': {\r\n          out += this.renderer.code(token.text,\r\n            token.lang,\r\n            token.escaped);\r\n          continue;\r\n        }\r\n        case 'table': {\r\n          header = '';\r\n\r\n          // header\r\n          cell = '';\r\n          l2 = token.header.length;\r\n          for (j = 0; j < l2; j++) {\r\n            cell += this.renderer.tablecell(\r\n              this.parseInline(token.header[j].tokens),\r\n              { header: true, align: token.align[j] }\r\n            );\r\n          }\r\n          header += this.renderer.tablerow(cell);\r\n\r\n          body = '';\r\n          l2 = token.rows.length;\r\n          for (j = 0; j < l2; j++) {\r\n            row = token.rows[j];\r\n\r\n            cell = '';\r\n            l3 = row.length;\r\n            for (k = 0; k < l3; k++) {\r\n              cell += this.renderer.tablecell(\r\n                this.parseInline(row[k].tokens),\r\n                { header: false, align: token.align[k] }\r\n              );\r\n            }\r\n\r\n            body += this.renderer.tablerow(cell);\r\n          }\r\n          out += this.renderer.table(header, body);\r\n          continue;\r\n        }\r\n        case 'blockquote': {\r\n          body = this.parse(token.tokens);\r\n          out += this.renderer.blockquote(body);\r\n          continue;\r\n        }\r\n        case 'list': {\r\n          ordered = token.ordered;\r\n          start = token.start;\r\n          loose = token.loose;\r\n          l2 = token.items.length;\r\n\r\n          body = '';\r\n          for (j = 0; j < l2; j++) {\r\n            item = token.items[j];\r\n            checked = item.checked;\r\n            task = item.task;\r\n\r\n            itemBody = '';\r\n            if (item.task) {\r\n              checkbox = this.renderer.checkbox(checked);\r\n              if (loose) {\r\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\r\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\r\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\r\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\r\n                  }\r\n                } else {\r\n                  item.tokens.unshift({\r\n                    type: 'text',\r\n                    text: checkbox\r\n                  });\r\n                }\r\n              } else {\r\n                itemBody += checkbox;\r\n              }\r\n            }\r\n\r\n            itemBody += this.parse(item.tokens, loose);\r\n            body += this.renderer.listitem(itemBody, task, checked);\r\n          }\r\n\r\n          out += this.renderer.list(body, ordered, start);\r\n          continue;\r\n        }\r\n        case 'html': {\r\n          out += this.renderer.html(token.text, token.block);\r\n          continue;\r\n        }\r\n        case 'paragraph': {\r\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\r\n          continue;\r\n        }\r\n        case 'text': {\r\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\r\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\r\n            token = tokens[++i];\r\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\r\n          }\r\n          out += top ? this.renderer.paragraph(body) : body;\r\n          continue;\r\n        }\r\n\r\n        default: {\r\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\r\n          if (this.options.silent) {\r\n            console.error(errMsg);\r\n            return;\r\n          } else {\r\n            throw new Error(errMsg);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Parse Inline Tokens\r\n   */\r\n  parseInline(tokens, renderer) {\r\n    renderer = renderer || this.renderer;\r\n    let out = '',\r\n      i,\r\n      token,\r\n      ret;\r\n\r\n    const l = tokens.length;\r\n    for (i = 0; i < l; i++) {\r\n      token = tokens[i];\r\n\r\n      // Run any renderer extensions\r\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\r\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\r\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\r\n          out += ret || '';\r\n          continue;\r\n        }\r\n      }\r\n\r\n      switch (token.type) {\r\n        case 'escape': {\r\n          out += renderer.text(token.text);\r\n          break;\r\n        }\r\n        case 'html': {\r\n          out += renderer.html(token.text);\r\n          break;\r\n        }\r\n        case 'link': {\r\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\r\n          break;\r\n        }\r\n        case 'image': {\r\n          out += renderer.image(token.href, token.title, token.text);\r\n          break;\r\n        }\r\n        case 'strong': {\r\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\r\n          break;\r\n        }\r\n        case 'em': {\r\n          out += renderer.em(this.parseInline(token.tokens, renderer));\r\n          break;\r\n        }\r\n        case 'codespan': {\r\n          out += renderer.codespan(token.text);\r\n          break;\r\n        }\r\n        case 'br': {\r\n          out += renderer.br();\r\n          break;\r\n        }\r\n        case 'del': {\r\n          out += renderer.del(this.parseInline(token.tokens, renderer));\r\n          break;\r\n        }\r\n        case 'text': {\r\n          out += renderer.text(token.text);\r\n          break;\r\n        }\r\n        default: {\r\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\r\n          if (this.options.silent) {\r\n            console.error(errMsg);\r\n            return;\r\n          } else {\r\n            throw new Error(errMsg);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return out;\r\n  }\r\n}\r\n\r\nclass Hooks {\r\n  constructor(options) {\r\n    this.options = options || defaults;\r\n  }\r\n\r\n  static passThroughHooks = new Set([\r\n    'preprocess',\r\n    'postprocess'\r\n  ]);\r\n\r\n  /**\r\n   * Process markdown before marked\r\n   */\r\n  preprocess(markdown) {\r\n    return markdown;\r\n  }\r\n\r\n  /**\r\n   * Process HTML after marked is finished\r\n   */\r\n  postprocess(html) {\r\n    return html;\r\n  }\r\n}\r\n\r\nclass Marked {\r\n  defaults = getDefaults();\r\n  options = this.setOptions;\r\n\r\n  parse = this.#parseMarkdown(Lexer.lex, Parser.parse);\r\n  parseInline = this.#parseMarkdown(Lexer.lexInline, Parser.parseInline);\r\n\r\n  Parser = Parser;\r\n  parser = Parser.parse;\r\n  Renderer = Renderer;\r\n  TextRenderer = TextRenderer;\r\n  Lexer = Lexer;\r\n  lexer = Lexer.lex;\r\n  Tokenizer = Tokenizer;\r\n  Slugger = Slugger;\r\n  Hooks = Hooks;\r\n\r\n  constructor(...args) {\r\n    this.use(...args);\r\n  }\r\n\r\n  walkTokens(tokens, callback) {\r\n    let values = [];\r\n    for (const token of tokens) {\r\n      values = values.concat(callback.call(this, token));\r\n      switch (token.type) {\r\n        case 'table': {\r\n          for (const cell of token.header) {\r\n            values = values.concat(this.walkTokens(cell.tokens, callback));\r\n          }\r\n          for (const row of token.rows) {\r\n            for (const cell of row) {\r\n              values = values.concat(this.walkTokens(cell.tokens, callback));\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'list': {\r\n          values = values.concat(this.walkTokens(token.items, callback));\r\n          break;\r\n        }\r\n        default: {\r\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\r\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\r\n              values = values.concat(this.walkTokens(token[childTokens], callback));\r\n            });\r\n          } else if (token.tokens) {\r\n            values = values.concat(this.walkTokens(token.tokens, callback));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  use(...args) {\r\n    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\r\n\r\n    args.forEach((pack) => {\r\n      // copy options to new object\r\n      const opts = { ...pack };\r\n\r\n      // set async to true if it was set to true before\r\n      opts.async = this.defaults.async || opts.async || false;\r\n\r\n      // ==-- Parse \"addon\" extensions --== //\r\n      if (pack.extensions) {\r\n        pack.extensions.forEach((ext) => {\r\n          if (!ext.name) {\r\n            throw new Error('extension name required');\r\n          }\r\n          if (ext.renderer) { // Renderer extensions\r\n            const prevRenderer = extensions.renderers[ext.name];\r\n            if (prevRenderer) {\r\n              // Replace extension with func to run new extension but fall back if false\r\n              extensions.renderers[ext.name] = function(...args) {\r\n                let ret = ext.renderer.apply(this, args);\r\n                if (ret === false) {\r\n                  ret = prevRenderer.apply(this, args);\r\n                }\r\n                return ret;\r\n              };\r\n            } else {\r\n              extensions.renderers[ext.name] = ext.renderer;\r\n            }\r\n          }\r\n          if (ext.tokenizer) { // Tokenizer Extensions\r\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\r\n              throw new Error(\"extension level must be 'block' or 'inline'\");\r\n            }\r\n            if (extensions[ext.level]) {\r\n              extensions[ext.level].unshift(ext.tokenizer);\r\n            } else {\r\n              extensions[ext.level] = [ext.tokenizer];\r\n            }\r\n            if (ext.start) { // Function to check for start of token\r\n              if (ext.level === 'block') {\r\n                if (extensions.startBlock) {\r\n                  extensions.startBlock.push(ext.start);\r\n                } else {\r\n                  extensions.startBlock = [ext.start];\r\n                }\r\n              } else if (ext.level === 'inline') {\r\n                if (extensions.startInline) {\r\n                  extensions.startInline.push(ext.start);\r\n                } else {\r\n                  extensions.startInline = [ext.start];\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (ext.childTokens) { // Child tokens to be visited by walkTokens\r\n            extensions.childTokens[ext.name] = ext.childTokens;\r\n          }\r\n        });\r\n        opts.extensions = extensions;\r\n      }\r\n\r\n      // ==-- Parse \"overwrite\" extensions --== //\r\n      if (pack.renderer) {\r\n        const renderer = this.defaults.renderer || new Renderer(this.defaults);\r\n        for (const prop in pack.renderer) {\r\n          const prevRenderer = renderer[prop];\r\n          // Replace renderer with func to run extension, but fall back if false\r\n          renderer[prop] = (...args) => {\r\n            let ret = pack.renderer[prop].apply(renderer, args);\r\n            if (ret === false) {\r\n              ret = prevRenderer.apply(renderer, args);\r\n            }\r\n            return ret;\r\n          };\r\n        }\r\n        opts.renderer = renderer;\r\n      }\r\n      if (pack.tokenizer) {\r\n        const tokenizer = this.defaults.tokenizer || new Tokenizer(this.defaults);\r\n        for (const prop in pack.tokenizer) {\r\n          const prevTokenizer = tokenizer[prop];\r\n          // Replace tokenizer with func to run extension, but fall back if false\r\n          tokenizer[prop] = (...args) => {\r\n            let ret = pack.tokenizer[prop].apply(tokenizer, args);\r\n            if (ret === false) {\r\n              ret = prevTokenizer.apply(tokenizer, args);\r\n            }\r\n            return ret;\r\n          };\r\n        }\r\n        opts.tokenizer = tokenizer;\r\n      }\r\n\r\n      // ==-- Parse Hooks extensions --== //\r\n      if (pack.hooks) {\r\n        const hooks = this.defaults.hooks || new Hooks();\r\n        for (const prop in pack.hooks) {\r\n          const prevHook = hooks[prop];\r\n          if (Hooks.passThroughHooks.has(prop)) {\r\n            hooks[prop] = (arg) => {\r\n              if (this.defaults.async) {\r\n                return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\r\n                  return prevHook.call(hooks, ret);\r\n                });\r\n              }\r\n\r\n              const ret = pack.hooks[prop].call(hooks, arg);\r\n              return prevHook.call(hooks, ret);\r\n            };\r\n          } else {\r\n            hooks[prop] = (...args) => {\r\n              let ret = pack.hooks[prop].apply(hooks, args);\r\n              if (ret === false) {\r\n                ret = prevHook.apply(hooks, args);\r\n              }\r\n              return ret;\r\n            };\r\n          }\r\n        }\r\n        opts.hooks = hooks;\r\n      }\r\n\r\n      // ==-- Parse WalkTokens extensions --== //\r\n      if (pack.walkTokens) {\r\n        const walkTokens = this.defaults.walkTokens;\r\n        opts.walkTokens = function(token) {\r\n          let values = [];\r\n          values.push(pack.walkTokens.call(this, token));\r\n          if (walkTokens) {\r\n            values = values.concat(walkTokens.call(this, token));\r\n          }\r\n          return values;\r\n        };\r\n      }\r\n\r\n      this.defaults = { ...this.defaults, ...opts };\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  setOptions(opt) {\r\n    this.defaults = { ...this.defaults, ...opt };\r\n    return this;\r\n  }\r\n\r\n  #parseMarkdown(lexer, parser) {\r\n    return (src, opt, callback) => {\r\n      if (typeof opt === 'function') {\r\n        callback = opt;\r\n        opt = null;\r\n      }\r\n\r\n      const origOpt = { ...opt };\r\n      opt = { ...this.defaults, ...origOpt };\r\n      const throwError = this.#onError(opt.silent, opt.async, callback);\r\n\r\n      // throw error in case of non string input\r\n      if (typeof src === 'undefined' || src === null) {\r\n        return throwError(new Error('marked(): input parameter is undefined or null'));\r\n      }\r\n      if (typeof src !== 'string') {\r\n        return throwError(new Error('marked(): input parameter is of type '\r\n          + Object.prototype.toString.call(src) + ', string expected'));\r\n      }\r\n\r\n      checkDeprecations(opt, callback);\r\n\r\n      if (opt.hooks) {\r\n        opt.hooks.options = opt;\r\n      }\r\n\r\n      if (callback) {\r\n        const highlight = opt.highlight;\r\n        let tokens;\r\n\r\n        try {\r\n          if (opt.hooks) {\r\n            src = opt.hooks.preprocess(src);\r\n          }\r\n          tokens = lexer(src, opt);\r\n        } catch (e) {\r\n          return throwError(e);\r\n        }\r\n\r\n        const done = (err) => {\r\n          let out;\r\n\r\n          if (!err) {\r\n            try {\r\n              if (opt.walkTokens) {\r\n                this.walkTokens(tokens, opt.walkTokens);\r\n              }\r\n              out = parser(tokens, opt);\r\n              if (opt.hooks) {\r\n                out = opt.hooks.postprocess(out);\r\n              }\r\n            } catch (e) {\r\n              err = e;\r\n            }\r\n          }\r\n\r\n          opt.highlight = highlight;\r\n\r\n          return err\r\n            ? throwError(err)\r\n            : callback(null, out);\r\n        };\r\n\r\n        if (!highlight || highlight.length < 3) {\r\n          return done();\r\n        }\r\n\r\n        delete opt.highlight;\r\n\r\n        if (!tokens.length) return done();\r\n\r\n        let pending = 0;\r\n        this.walkTokens(tokens, (token) => {\r\n          if (token.type === 'code') {\r\n            pending++;\r\n            setTimeout(() => {\r\n              highlight(token.text, token.lang, (err, code) => {\r\n                if (err) {\r\n                  return done(err);\r\n                }\r\n                if (code != null && code !== token.text) {\r\n                  token.text = code;\r\n                  token.escaped = true;\r\n                }\r\n\r\n                pending--;\r\n                if (pending === 0) {\r\n                  done();\r\n                }\r\n              });\r\n            }, 0);\r\n          }\r\n        });\r\n\r\n        if (pending === 0) {\r\n          done();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (opt.async) {\r\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\r\n          .then(src => lexer(src, opt))\r\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\r\n          .then(tokens => parser(tokens, opt))\r\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\r\n          .catch(throwError);\r\n      }\r\n\r\n      try {\r\n        if (opt.hooks) {\r\n          src = opt.hooks.preprocess(src);\r\n        }\r\n        const tokens = lexer(src, opt);\r\n        if (opt.walkTokens) {\r\n          this.walkTokens(tokens, opt.walkTokens);\r\n        }\r\n        let html = parser(tokens, opt);\r\n        if (opt.hooks) {\r\n          html = opt.hooks.postprocess(html);\r\n        }\r\n        return html;\r\n      } catch (e) {\r\n        return throwError(e);\r\n      }\r\n    };\r\n  }\r\n\r\n  #onError(silent, async, callback) {\r\n    return (e) => {\r\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\r\n\r\n      if (silent) {\r\n        const msg = '<p>An error occurred:</p><pre>'\r\n          + escape(e.message + '', true)\r\n          + '</pre>';\r\n        if (async) {\r\n          return Promise.resolve(msg);\r\n        }\r\n        if (callback) {\r\n          callback(null, msg);\r\n          return;\r\n        }\r\n        return msg;\r\n      }\r\n\r\n      if (async) {\r\n        return Promise.reject(e);\r\n      }\r\n      if (callback) {\r\n        callback(e);\r\n        return;\r\n      }\r\n      throw e;\r\n    };\r\n  }\r\n}\r\n\r\nconst markedInstance = new Marked(defaults);\r\n\r\n/**\r\n * Marked\r\n */\r\nfunction marked(src, opt, callback) {\r\n  return markedInstance.parse(src, opt, callback);\r\n}\r\n\r\n/**\r\n * Options\r\n */\r\n\r\nmarked.options =\r\nmarked.setOptions = function(opt) {\r\n  markedInstance.setOptions(opt);\r\n  marked.defaults = markedInstance.defaults;\r\n  changeDefaults(marked.defaults);\r\n  return marked;\r\n};\r\n\r\nmarked.getDefaults = getDefaults;\r\n\r\nmarked.defaults = defaults;\r\n\r\n/**\r\n * Use Extension\r\n */\r\n\r\nmarked.use = function(...args) {\r\n  markedInstance.use(...args);\r\n  marked.defaults = markedInstance.defaults;\r\n  changeDefaults(marked.defaults);\r\n  return marked;\r\n};\r\n\r\n/**\r\n * Run callback for every token\r\n */\r\n\r\nmarked.walkTokens = function(tokens, callback) {\r\n  return markedInstance.walkTokens(tokens, callback);\r\n};\r\n\r\n/**\r\n * Parse Inline\r\n * @param {string} src\r\n */\r\nmarked.parseInline = markedInstance.parseInline;\r\n\r\n/**\r\n * Expose\r\n */\r\nmarked.Parser = Parser;\r\nmarked.parser = Parser.parse;\r\nmarked.Renderer = Renderer;\r\nmarked.TextRenderer = TextRenderer;\r\nmarked.Lexer = Lexer;\r\nmarked.lexer = Lexer.lex;\r\nmarked.Tokenizer = Tokenizer;\r\nmarked.Slugger = Slugger;\r\nmarked.Hooks = Hooks;\r\nmarked.parse = marked;\r\n\r\nconst options = marked.options;\r\nconst setOptions = marked.setOptions;\r\nconst use = marked.use;\r\nconst walkTokens = marked.walkTokens;\r\nconst parseInline = marked.parseInline;\r\nconst parse = marked;\r\nconst parser = Parser.parse;\r\nconst lexer = Lexer.lex;\r\n\r\nexport { Hooks, Lexer, Marked, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\r\n"],
  "mappings": "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",
  "names": ["noopTest", "lexer", "options", "text", "mangle", "smartypants", "block", "parser", "args", "ret", "walkTokens", "src"]
}
